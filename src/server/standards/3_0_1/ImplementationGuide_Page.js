const BackboneElement = require('./BackboneElement');

class ImplementationGuide_Page extends BackboneElement {

	constructor ( opts ) {
		super( opts );
		Object.assign(this, opts);
	}

	static get __resourceType () {
		return 'ImplementationGuide_Page';
	}

	// The source address for the page.
	get source () {
		return this._source;
	}

	set source ( new_value ) {
		this._source = new_value;
	}

	// A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
	get title () {
		return this._title;
	}

	set title ( new_value ) {
		this._title = new_value;
	}

	// The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
	get kind () {
		return this._kind;
	}

	set kind ( new_value ) {
		// Throw if new value is not in the allowed values
		let allowed_values = ['page', 'example', 'list', 'include', 'directory', 'dictionary', 'toc', 'resource'];
		if ( new_value && allowed_values.indexOf(new_value) === -1 ) {
			throw new Error(`Expected one of ${allowed_values}, got ${new_value} for field kind`);
		}
		this._kind = new_value;
	}

	// For constructed pages, what kind of resources to include in the list.
	get type () {
		return this._type;
	}

	set type ( new_value ) {
		this._type = Array.isArray(new_value) ? new_value.map(val => val) : [new_value];
	}

	// For constructed pages, a list of packages to include in the page (or else empty for everything).
	get package () {
		return this._package;
	}

	set package ( new_value ) {
		this._package = Array.isArray(new_value) ? new_value.map(val => val) : [new_value];
	}

	// The format of the page.
	get format () {
		return this._format;
	}

	set format ( new_value ) {
		// Throw if new value does not match the pattern
		let pattern = /[^\s]+([\s]?[^\s]+)*/;
		if ( new_value && !pattern.test(new_value) ) {
			throw new Error(`Invalid format for ${new_value} on field format`);
		}
		this._format = new_value;
	}

	// Nested Pages/Sections under this page.
	get page () {
		return this._page;
	}

	set page ( new_value ) {
		this._page = Array.isArray(new_value) ? new_value.map(val => new ImplementationGuide_Page(val)) : [new ImplementationGuide_Page(new_value)];
	}

	toJSON () {
		return Object.assign(super.toJSON(), {
			source: this._source,
			title: this._title,
			kind: this._kind,
			type: this._type,
			package: this._package,
			format: this._format,
			page: this._page && this._page.map(v => v.toJSON())
		});
	}

}

module.exports = ImplementationGuide_Page;
